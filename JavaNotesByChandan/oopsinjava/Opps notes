********************* Object-Oriented Programming ********************

# Object-Oriented Programming

Aim :-The main aim of object-oriented programming is to implement real-world entities, for example, object, classes,
       abstraction, inheritance, polymorphism, etc.

 Class :-

 Object:-


1. Encapsulation

 Defination :- Encapsulation in Java refers to integrating data (variables) and code (methods) into a single unit. In encapsulation,
 a class's variables are hidden from other classes and can only be accessed by the methods of the class in which they are found.
                                                                or

Encapsulation in Java is a process of wrapping code (method ) and data(Variable) together into a single unit, for example, a capsule which
is mixed of several medicines.

-> Given this, getters and setters are also known as accessors and mutators,


* method which is used in Encapsulation

1.getter method :- Getters: These are the methods used in Object-Oriented Programming (OOPS) which helps to access the
private attributes from a class.


2. setter method :- Setters: These are the methods used in OOPS feature which helps to set the value to private
attributes in a class.





Advantages of Encapsulation :-
1.Better Control
  Encapsulation provides ultimate control over the data members and data methods inside the class.

  Getter and Setter
  The standard IDEs provide in-built support for ‘Getter and Setter’ methods, which increases the programming pace.

  Security
  Encapsulation prevents access to data members and data methods by any external classes. The encapsulation process improves the security of the encapsulated data.

  Flexibility
  Changes made to one part of the code can be successfully implemented without affecting any other part of the code.

2.
3.
4.
5.




Disadvantages  of Encapsulation:-
1.
2.
3.
4.
5.


Data Hiding vs. Encapsulation in Java

                 Data Hiding                                 |                       Data Encapsulation
-------------------------------------------------------------------------------------------------------------------------------
   1.Data hiding can be considered as the parent process     |       Encapsulation is a sub-process of data hiding
                                                             |
   2.Access specifier is always private                      |       Access specifier can be private and public
                                                             |
   3.Data hiding is about hiding method implementation       |        Encapsulation is about combining methods with data members
                                                             |
   4.The main motto is to hide data and its implementation   |       The main motto is to combine data and their methods

1. Inheritance


Defination:-Inheritance in Java is a mechanism where one class is allowed to inherit the fields and methods of another
class. The class that inherits is called the subclass or child class, and the class from which it inherits is called
the superclass or parent class.






# Why Do We Need Java Inheritance?'

 1 code reusability:-The code written in the Superclass is common to all subclasses. Child classes can directly use the
  parent class code.
 2  Method overriding :- is achievable only through Inheritance. It is one of the ways by which Java achieves Run Time
 Polymorphism.
 3 Abstraction: The concept of abstract where we do not have to provide all details, is achieved through inheritance.
  Abstraction only shows the functionality to the user.


#  Important Terminologies Used in Java Inheritance

Class:-Class is a set of objects which shares common characteristics/ behavior and common properties/ attributes.
      Class is not a real-world entity. It is just a template or blueprint or prototype from which objects are created.

Super Class/Parent Class:-The class whose features are inherited is known as a superclass(or a base class or a parent class).

Sub Class/Child Class: -The class that inherits the other class is known as a subclass(or a derived class, extended class
    , or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.

Reusability:- Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and there is
       already a class that includes some of the code that we want, we can derive our new class from the existing class.
       By doing this, we are reusing the fields and methods of the existing class.


# How to Use Inheritance in Java?

:-The extends keyword is used for inheritance in Java. Using the extends keyword indicates you are derived from an
existing class. In other words, “extends” refers to increased functionality.


Syntax :

class  DerivedClass extends BaseClass{
        // method are filed
}




#  Types of Inheritance:-

1.Single Inheritance
2.Multilevel Inheritance
3.Hierarchical Inheritance
4.Multiple Inheritance(Although with interfaces, multiple inheritances are supported by Java.)
5.Hybrid Inheritance

1. Single Inheritance





# Advantages Of Inheritance in Java:

1.Code Reusability: Inheritance allows for code reuse and reduces the amount of code that needs to be written. The subclass can reuse the properties and methods of the superclass, reducing duplication of code.

2.Abstraction: Inheritance allows for the creation of abstract classes that define a common interface for a group of related classes. This promotes abstraction and encapsulation, making the code easier to maintain and extend.

3.Class Hierarchy: Inheritance allows for the creation of a class hierarchy, which can be used to model real-world objects and their relationships.

4.Polymorphism: Inheritance allows for polymorphism, which is the ability of an object to take on multiple forms. Subclasses can override the methods of the superclass, which allows them to change their behavior in different ways.


# Disadvantages of Inheritance in Java:

1.Complexity: Inheritance can make the code more complex and harder to understand. This is especially true if the
inheritance hierarchy is deep or if multiple inheritances is used.

2.Tight Coupling: Inheritance creates a tight coupling between the superclass and subclass, making it difficult to make
 changes to the superclass without affecting the subclass.



# Polymorphism